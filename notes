build node CLI takes in information about employees and generats an HTML web page that displays summaries for each person
ensure all unit tests pass


build software engineering team generator command line app
prompt user for info about the TEAM MANAGER
THEN
prompt user for info about any # of team memmbers ENGINEERS & INTERNS
when finished building team
app will create an HTML file that displays team roster


use inquirer to prompt:

email
id: 
specific info based on role
intern: school (string)
engineer: github username (link)
manager: office number


Name
(icon)Position/Title

ID: # .... is this automatic based on entry?
Email: (link?)
(intern) School: (string)
(engineer) Github: username (link?)
(manager) Office number: (number)

make methods as simple as possible so they're easier to test
may want to add a placeholder character that helps your profram identify where the dynamic markup begins and ends


Must have these classes: 
Employee, Manager, Engineer, Intern. 
The tests for these classes in the tests directory must all pass.

The different employee types should all inherit some methods and properties from a base class of Employee

The first class is an Employee parent class with the following properties and
methods:

-name
-id
-email
-getName()
-getId()
-getEmail()
-getRole() // Returns 'Employee'**

The other three classes will extend Employee.

Manager will also have:
-officeNumber
-getRole() // Overridden to return 'Manager'**

Engineer will also have:
-github  // GitHub username
-getGithub()
-getRole() // Overridden to return 'Engineer'**

Intern will also have:
-school
-getSchool()
-getRole() // Overridden to return 'Intern'**

User input
The project must prompt the user to build an engineering team. An engineering
team consists of a manager, and any number of engineers and interns.

Roster output
The project must generate a TEAM.HTML page in the output directory, that displays a nicely formatted team roster. Each team member should display the following in no particular order:

-Name
-Role
-ID


Role-specific property (School, link to GitHub profile, or office number)


TEMPLATES FOR EACH TYPE OF USER:
main.html
engineer.html
intern.html
manager.html


DIRECTORY STRUCTURE:
lib/           		// classes and helper code
output/        		// rendered output
templates/     		// HTML template(s)
  main.html		//EMPLOYEE*
  engineer.html
  intern.html
  manager.html
test/          		// jest tests
  Employee.test.js
  Engineer.test.js
  Intern.test.js
  Manager.test.js
app.js         		// Runs the application


---------------------------------------
(CREATING MULTIPLE INSTANCES OF INTERNS, ENGINEERS, ETC.)
implement ES6 class syntax to INSTANTIATE MULTIPLE INSTANCES of a single type of object
(SUBCLASSES: MGR, INT, ENG. INHERIT FROM EMPLOYEE ANCESTOR CLASS)
 construct SUBCLASSES that inherit features from a common ANCESTOR CLASS

REMEMBER TO CHANGE SOME OF THE DETAILS IN THE PACKAGE.JSON FILE
REMEMBER TO CLEAR OUT UNECESSARY NOTES AND CONSOLE.LOGSS


put questions in a questions array 

use class to create template- passing bullshit name parameters 